require('dotenv').config()
const { Telegraf, Markup, Scenes, session } = require('telegraf')
const sqlite3 = require('sqlite3').verbose()
const crypto = require('crypto')

const bot = new Telegraf(process.env.BOT_TOKEN)

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã shareLinkScene
const shareLinkScene = new Scenes.BaseScene('shareLinkScene')
shareLinkScene.enter(async ctx => {
	const me = await ctx.telegram.getMe()
	const link = `https://t.me/${me.username}?start=${ctx.from.id}`
	const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(
		'–ó–∞–¥–∞–π –º–Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å\n\nüëâ ' + link
	)}`

	const messageText = `–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ç–µ–±–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–µ.\n\nüìå –í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>${link}</code>\n\n–ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ –æ–Ω–∞ —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è üëÜ`

	await ctx.replyWithHTML(messageText, {
		reply_markup: {
			inline_keyboard: [[{ text: '–ü–æ–¥–µ–ª–∏—Ç—Å—è —Å—Å—ã–ª–∫–æ–π', url: shareUrl }]],
		},
	})

	// –£–¥–∞–ª–µ–Ω–æ: await ctx.answerCbQuery('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
})

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω—ã
const stage = new Scenes.Stage([shareLinkScene])
bot.use(session())
bot.use(stage.middleware())

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
bot.start(async ctx => {
	const referrerId = ctx.message.text.split(' ')[1]
	if (referrerId) {
		if (referrerId === ctx.from.id.toString()) {
			await ctx.reply(
				'ü§¶‚Äç‚ôÄÔ∏è –ü–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ - –≥–ª—É–ø–æ.\n\n–õ—É—á—à–µ —Ä–∞–∑–º–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –≤ —Å—Ç–æ—Ä–∏–∑ –∏–ª–∏ —É —Å–µ–±—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ Instagram/Telegram/VK/TikTok, –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∑–∞—Å—Ç–∞–≤—è—Ç —Å–µ–±—è –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å üòâ'
			)
		} else {
			ctx.session.referrerId = referrerId
			await ctx.reply(
				'–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫–∏.'
			)
		}
	} else {
		await ctx.scene.enter('shareLinkScene')
	}
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async ctx => {
	const me = await ctx.telegram.getMe()
	if (ctx.session.referrerId) {
		await ctx.telegram.sendMessage(
			ctx.session.referrerId,
			`–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${ctx.from.username || ctx.from.first_name}: ${
				ctx.message.text
			}`
		)
		await ctx.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
	} else {
		const link = `https://t.me/${me.username}?start=${ctx.from.id}`
		const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(
			'–ó–∞–¥–∞–π –º–Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å\n\nüëâ ' + link
		)}`
		await ctx.replyWithHTML(
			'–ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n' +
				`üëâ <code>https://t.me/${me.username}?start=${ctx.from.id}</code>\n\n` +
				'–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Telegram, TikTok, Instagram (stories), —á—Ç–æ–±—ã –≤–∞–º –º–æ–≥–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å üí¨',
			{
				reply_markup: {
					inline_keyboard: [[{ text: '–ü–æ–¥–µ–ª–∏—Ç—Å—è —Å—Å—ã–ª–∫–æ–π', url: shareUrl }]],
				},
			}
		)
	}
})

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.')
